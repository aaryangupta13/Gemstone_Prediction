name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5.0.0

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5.0.0

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      # ---- Cache Conda Packages ----
      - name: Cache Conda packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.conda/pkgs
            ~/.conda/envs/gemstone_price_prediction_venv
          key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-conda-

      # ---- Setup Miniconda (pure Conda) ----
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          use-mamba: false

      # ---- Create Conda Environment (CI-safe) ----
      - name: Create/Update Conda Environment
        run: |
          if conda env list | grep -q "gemstone_price_prediction_venv"; then
            echo "✅ Conda environment exists, skipping creation"
          else
            echo "⚙️ Creating Conda environment..."
            conda env create --file environment.yml --name gemstone_price_prediction_venv
          fi

      - name: Debug ECR variables
        run: |
          echo "ECR_REGISTRY = ${{ secrets.AWS_ECR_LOGIN_URL }}"
          echo "ECR_REPOSITORY = ${{ secrets.AWS_REPOSITORY_NAME }}"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_LOGIN_URL }}
          ECR_REPOSITORY: ${{ secrets.AWS_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  Continuous-Deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Pull latest image from ECR
        run: |
          docker pull ${{ secrets.AWS_ECR_LOGIN_URL }}/${{ secrets.AWS_REPOSITORY_NAME }}:latest

      - name: Stop and remove old container if running
        run: |
          docker ps -q --filter "name=${{ secrets.AWS_REPOSITORY_NAME }}" | grep -q . && \
          docker stop ${{ secrets.AWS_REPOSITORY_NAME }} && \
          docker rm -fv ${{ secrets.AWS_REPOSITORY_NAME }} || true

      - name: Run Docker Container
        run: |
          docker run -d -p 5001:5001 --ipc="host" --name ${{ secrets.AWS_REPOSITORY_NAME }} \
          -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          -e AWS_REGION=${{ secrets.AWS_REGION }} \
          ${{ secrets.AWS_ECR_LOGIN_URL }}/${{ secrets.AWS_REPOSITORY_NAME }}:latest

      - name: Clean previous images and containers
        run: docker system prune -f
